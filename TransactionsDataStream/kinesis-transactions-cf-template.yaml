AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Function Triggered by Kinesis Stream

Resources:
  TransactionsOutputStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: TransactionsOutputStream
      ShardCount: 1

  KinesisTransactionsHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KinesisTransactionsHandlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                Resource: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/TransactionsOutputStream

  KinesisTransactionsHandler:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: KinesisTransactionsHandler
      Handler: index.lambda_handler
      Role: !GetAtt KinesisTransactionsHandlerRole.Arn
      Code:
        ZipFile: |
          import base64
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              for record in event['Records']:
                  payload = base64.b64decode(record["kinesis"]["data"]).decode('utf-8')
                  logger.info('Decoded payload: %s', payload)
              return 'Successfully processed {} records.'.format(len(event['Records']))
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Architectures:
        - x86_64

  LambdaKinesisTrigger:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: KinesisTransactionsHandler
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/TransactionsOutputStream
      FunctionName: !GetAtt KinesisTransactionsHandler.Arn
      StartingPosition: LATEST

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  ConnectHandlerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  ConnectHandlerServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource: !GetAtt ConnectionsTable.Arn
        Version: "2012-10-17"
      PolicyName: ConnectHandlerServiceRoleDefaultPolicy
      Roles:
        - Ref: ConnectHandlerServiceRole

  ConnectHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ConnectHandlerFunction
      Handler: index.lambda_handler
      Role: !GetAtt ConnectHandlerServiceRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])

          def lambda_handler(event, context):
              try:
                  connection_id = event['requestContext']['connectionId']
                  table.put_item(
                      Item={
                          'connectionId': connection_id
                      }
                  )
                  return {
                      'statusCode': 200
                  }
              except Exception as e:
                  print(e)
                  return {
                      'statusCode': 500,
                      'body': 'Failed to connect: ' + str(e)
                  }
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionsTable
      Timeout: 10

Outputs:
  KinesisStreamArn:
    Description: "ARN of the Kinesis Stream"
    Value: !GetAtt TransactionsOutputStream.Arn

  LambdaFunctionArn:
    Description: "ARN of the Lambda Function"
    Value: !GetAtt KinesisTransactionsHandler.Arn

  LambdaFunctionName:
    Description: "Name of the Lambda Function"
    Value: !Ref KinesisTransactionsHandler

  ConnectionsTableArn:
    Description: "ARN of the DynamoDB Table for WebSocket Connections"
    Value: !GetAtt ConnectionsTable.Arn