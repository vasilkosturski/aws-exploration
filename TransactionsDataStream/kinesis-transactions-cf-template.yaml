AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Function Triggered by Kinesis Stream

Resources:
  TransactionsOutputStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: TransactionsOutputStream
      ShardCount: 1

# Web Sockets API

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: websocket-transactions-api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectIntegration

  DeploymentWebSocketApi:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref WebSocketApi
    DependsOn:
      - ConnectRoute

  StageWebSocketApi:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref DeploymentWebSocketApi
      StageName: production

# Connections Table Start

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

# Lambda Handler - Kinesis Transactions

  KinesisTransactionsHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KinesisTransactionsHandlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                Resource: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/TransactionsOutputStream
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: !GetAtt ConnectionsTable.Arn
              - Effect: Allow
                Action:
                  - "execute-api:ManageConnections"
                Resource:
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  KinesisTransactionsHandler:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: KinesisTransactionsHandler
      Handler: index.lambda_handler
      Role: !GetAtt KinesisTransactionsHandlerRole.Arn
      Code:
        ZipFile: |
          import base64
          import logging
          import boto3
          import os
          
          # Initialize the DynamoDB and API Gateway clients
          dynamodb = boto3.client('dynamodb')
          api_gateway = boto3.client('apigatewaymanagementapi', endpoint_url=os.environ['WEBSOCKET_ENDPOINT'])
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              # Retrieve connection IDs from the DynamoDB table
              connection_ids = dynamodb.scan(
                  TableName=os.environ['CONNECTIONS_TABLE_NAME'],
                  ProjectionExpression='connectionId'
              ).get('Items', [])
          
              # Process Kinesis records
              for record in event['Records']:
                  payload = base64.b64decode(record["kinesis"]["data"]).decode('utf-8')
                  logger.info('Decoded payload: %s', payload)
          
                  # Send the message to each connection
                  for connection in connection_ids:
                      connection_id = connection['connectionId']['S']
                      try:
                          api_gateway.post_to_connection(
                              ConnectionId=connection_id,
                              Data=payload
                          )
                      except api_gateway.exceptions.GoneException:
                          # Handle the case where the connection is no longer available
                          logger.error("Connection %s is gone, consider deleting from the table", connection_id)
                          # Consider adding logic to delete the stale connection ID from the DynamoDB table
                      except Exception as e:
                          # Log and handle any other exceptions
                          logger.exception("Error sending message to connection %s: %s", connection_id, e)
          
              return f'Successfully processed {len(event["Records"])} records.'

      Runtime: python3.8
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTable
          WEBSOCKET_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${StageWebSocketApi}"
      Timeout: 30
      MemorySize: 128
      Architectures:
        - x86_64

  LambdaKinesisTrigger:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: KinesisTransactionsHandler
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/TransactionsOutputStream
      FunctionName: !GetAtt KinesisTransactionsHandler.Arn
      StartingPosition: LATEST

# Lambda Handler - Connect

  ConnectHandlerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  ConnectHandlerServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource: !GetAtt ConnectionsTable.Arn
        Version: "2012-10-17"
      PolicyName: ConnectHandlerServiceRoleDefaultPolicy
      Roles:
        - Ref: ConnectHandlerServiceRole

  ConnectHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ConnectHandlerFunction
      Handler: index.lambda_handler
      Role: !GetAtt ConnectHandlerServiceRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])

          def lambda_handler(event, context):
              try:
                  connection_id = event['requestContext']['connectionId']
                  table.put_item(
                      Item={
                          'connectionId': connection_id
                      }
                  )
                  return {
                      'statusCode': 200
                  }
              except Exception as e:
                  print(e)
                  return {
                      'statusCode': 500,
                      'body': 'Failed to connect: ' + str(e)
                  }
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref ConnectionsTable
      Timeout: 10

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectHandlerFunction.Arn}/invocations

  PermissionForWebSocketConnect:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt ConnectHandlerFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect

Outputs:
  KinesisStreamArn:
    Description: "ARN of the Kinesis Stream"
    Value: !GetAtt TransactionsOutputStream.Arn

  LambdaFunctionArn:
    Description: "ARN of the Lambda Function"
    Value: !GetAtt KinesisTransactionsHandler.Arn

  LambdaFunctionName:
    Description: "Name of the Lambda Function"
    Value: !Ref KinesisTransactionsHandler

  ConnectionsTableArn:
    Description: "ARN of the DynamoDB Table for WebSocket Connections"
    Value: !GetAtt ConnectionsTable.Arn

  WebSocketApiEndpoint:
    Description: "The endpoint URL for the WebSocket API"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${StageWebSocketApi}"