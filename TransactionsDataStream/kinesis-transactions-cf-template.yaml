AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Function Triggered by Kinesis Stream

Resources:
  KinesisTransactionsHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KinesisTransactionsHandlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                Resource: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/TransactionsOutputStream

  KinesisTransactionsHandler:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: KinesisTransactionsHandler
      Handler: lambda_function.lambda_handler
      Role: !GetAtt KinesisTransactionsHandlerRole.Arn
      Code:
        ZipFile: |
          import base64
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              for record in event['Records']:
                  payload = base64.b64decode(record["kinesis"]["data"]).decode('utf-8')
                  logger.info('Decoded payload: %s', payload)
              return 'Successfully processed {} records.'.format(len(event['Records']))
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Architectures:
        - x86_64

  LambdaKinesisTrigger:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: KinesisTransactionsHandler
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/TransactionsOutputStream
      FunctionName: !GetAtt KinesisTransactionsHandler.Arn
      StartingPosition: LATEST

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda Function"
    Value: !GetAtt KinesisTransactionsHandler.Arn

  LambdaFunctionName:
    Description: "Name of the Lambda Function"
    Value: !Ref KinesisTransactionsHandler

  KinesisStreamArn:
    Description: "ARN of the Kinesis Stream used as the event source"
    Value: !GetAtt LambdaKinesisTrigger.EventSourceArn