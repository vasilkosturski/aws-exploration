AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Function Triggered by Kinesis Stream

Resources:
  TransactionsInputStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: TransactionsInputStream
      ShardCount: 1

  TransactionsOutputStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: TransactionsOutputStream
      ShardCount: 1

  FlinkApplicationRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "kinesisanalytics.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "FlinkApplicationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ReadCode"
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: "arn:aws:s3:::flink-transactions-code-259984666282/flink-fraud-detection-1.0.jar"
              - Sid: "CloudWatchLogs"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:us-east-1:259984666282:log-group:/aws/kinesis-analytics/FlinkAppManual:*"
                  - "arn:aws:logs:us-east-1:259984666282:log-group:/aws/kinesis-analytics/FlinkAppManual:log-stream:*"
              - Sid: "KinesisStreams"
                Effect: "Allow"
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:GetShardIterator"
                  - "kinesis:GetRecords"
                  - "kinesis:PutRecord"
                  - "kinesis:PutRecords"
                  - "kinesis:ListShards"
                Resource:
                  - "arn:aws:kinesis:us-east-1:259984666282:stream/TransactionsInputStream"
                  - "arn:aws:kinesis:us-east-1:259984666282:stream/TransactionsOutputStream"

  FlinkApplication:
    Type: "AWS::KinesisAnalyticsV2::Application"
    Properties:
      ApplicationName: "FlinkTransactionProcessing"
      RuntimeEnvironment: "FLINK-1_15"
      ServiceExecutionRole: !GetAtt FlinkApplicationRole.Arn
      ApplicationConfiguration:
        ApplicationCodeConfiguration:
          CodeContent:
            S3ContentLocation:
              BucketARN: !Sub "arn:aws:s3:::flink-transactions-code-259984666282"
              FileKey: "flink-fraud-detection-1.0.jar"
          CodeContentType: "ZIPFILE"
        EnvironmentProperties:
          PropertyGroups:
            - PropertyGroupId: "ProducerConfigProperties"
              PropertyMap:
                "flink.inputstream.initpos": "LATEST"
                "aws.region": "us-east-1"
                "AggregationEnabled": "false"
            - PropertyGroupId: "ConsumerConfigProperties"
              PropertyMap:
                "aws.region": "us-east-1"
        FlinkApplicationConfiguration:
          MonitoringConfiguration:
            ConfigurationType: "CUSTOM"
            LogLevel: "INFO"
            MetricsLevel: "TASK"

  StartFlinkApplicationFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Timeout: 30
      Role: !GetAtt StartFlinkApplicationRole.Arn
      Code:
        ZipFile: |
          import logging
          import json
          import boto3
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def handler(event, context):
            logger.info('Incoming CFN event {}'.format(event))
          
            responseData = {}
            try:
              application_name = event['ResourceProperties']['ApplicationName']
        
              # filter out events other than Create or Update,
              # you can also omit Update in order to start an application on Create only.
              if event['RequestType'] not in ["Create", "Update"]:
                logger.info('No-op for Application {} because CFN RequestType {} is filtered'.format(application_name, event['RequestType'])) 
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                
                return
        
              # use kinesisanalyticsv2 API to start an application.
              client_kda = boto3.client('kinesisanalyticsv2', region_name=event['ResourceProperties']['Region'])
              
              # get application status.
              describe_response = client_kda.describe_application(ApplicationName=application_name)
              application_status = describe_response['ApplicationDetail']['ApplicationStatus']
              
              # an application can be started from 'READY' status only.
              if application_status != 'READY':
                logger.info('No-op for Application {} because ApplicationStatus {} is filtered'.format(application_name, application_status)) 
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                
                return
        
              # create RunConfiguration. 
              run_configuration = { 
                'ApplicationRestoreConfiguration': {
                  'ApplicationRestoreType': 'RESTORE_FROM_LATEST_SNAPSHOT',
                }
              }
        
              logger.info('RunConfiguration for Application {}: {}'.format(application_name, run_configuration)) 
              
              # this call doesn't wait for an application to transfer to 'RUNNING' state.
              client_kda.start_application(ApplicationName=application_name, RunConfiguration=run_configuration)
        
              logger.info('Started Application: {}'.format(application_name)) 
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              logger.error(err)
              cfnresponse.send(event,context, cfnresponse.FAILED, {"Data": str(err)})
      Runtime: "python3.8"

  StartFlinkApplicationRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaFlinkStarterPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "kinesisanalytics:StartApplication"
                Resource: !Sub "arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:application/${FlinkApplication}"
              - Effect: "Allow"
                Action: "logs:CreateLogGroup"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: "logs:CreateLogStream"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  StartFlinkApplicationTrigger:
    Type: "Custom::StartFlinkApp"
    Properties:
      ServiceToken: !GetAtt StartFlinkApplicationFunction.Arn
      ApplicationName: !Ref FlinkApplication



